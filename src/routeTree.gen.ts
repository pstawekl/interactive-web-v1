/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WwwImport } from './routes/www'
import { Route as TasksImport } from './routes/tasks'
import { Route as EcommerceImport } from './routes/ecommerce'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as CoursesImport } from './routes/courses'
import { Route as ContactImport } from './routes/contact'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const WwwRoute = WwwImport.update({
  id: '/www',
  path: '/www',
  getParentRoute: () => rootRoute,
} as any)

const TasksRoute = TasksImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => rootRoute,
} as any)

const EcommerceRoute = EcommerceImport.update({
  id: '/ecommerce',
  path: '/ecommerce',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const CoursesRoute = CoursesImport.update({
  id: '/courses',
  path: '/courses',
  getParentRoute: () => rootRoute,
} as any)

const ContactRoute = ContactImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactImport
      parentRoute: typeof rootRoute
    }
    '/courses': {
      id: '/courses'
      path: '/courses'
      fullPath: '/courses'
      preLoaderRoute: typeof CoursesImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/ecommerce': {
      id: '/ecommerce'
      path: '/ecommerce'
      fullPath: '/ecommerce'
      preLoaderRoute: typeof EcommerceImport
      parentRoute: typeof rootRoute
    }
    '/tasks': {
      id: '/tasks'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksImport
      parentRoute: typeof rootRoute
    }
    '/www': {
      id: '/www'
      path: '/www'
      fullPath: '/www'
      preLoaderRoute: typeof WwwImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/contact': typeof ContactRoute
  '/courses': typeof CoursesRoute
  '/dashboard': typeof DashboardRoute
  '/ecommerce': typeof EcommerceRoute
  '/tasks': typeof TasksRoute
  '/www': typeof WwwRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/contact': typeof ContactRoute
  '/courses': typeof CoursesRoute
  '/dashboard': typeof DashboardRoute
  '/ecommerce': typeof EcommerceRoute
  '/tasks': typeof TasksRoute
  '/www': typeof WwwRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/contact': typeof ContactRoute
  '/courses': typeof CoursesRoute
  '/dashboard': typeof DashboardRoute
  '/ecommerce': typeof EcommerceRoute
  '/tasks': typeof TasksRoute
  '/www': typeof WwwRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/contact'
    | '/courses'
    | '/dashboard'
    | '/ecommerce'
    | '/tasks'
    | '/www'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/contact'
    | '/courses'
    | '/dashboard'
    | '/ecommerce'
    | '/tasks'
    | '/www'
  id:
    | '__root__'
    | '/'
    | '/contact'
    | '/courses'
    | '/dashboard'
    | '/ecommerce'
    | '/tasks'
    | '/www'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ContactRoute: typeof ContactRoute
  CoursesRoute: typeof CoursesRoute
  DashboardRoute: typeof DashboardRoute
  EcommerceRoute: typeof EcommerceRoute
  TasksRoute: typeof TasksRoute
  WwwRoute: typeof WwwRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ContactRoute: ContactRoute,
  CoursesRoute: CoursesRoute,
  DashboardRoute: DashboardRoute,
  EcommerceRoute: EcommerceRoute,
  TasksRoute: TasksRoute,
  WwwRoute: WwwRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/contact",
        "/courses",
        "/dashboard",
        "/ecommerce",
        "/tasks",
        "/www"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/contact": {
      "filePath": "contact.tsx"
    },
    "/courses": {
      "filePath": "courses.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/ecommerce": {
      "filePath": "ecommerce.tsx"
    },
    "/tasks": {
      "filePath": "tasks.tsx"
    },
    "/www": {
      "filePath": "www.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
