/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TasksImport } from './routes/tasks'
import { Route as RegisterImport } from './routes/register'
import { Route as ModeratorImport } from './routes/moderator'
import { Route as LoginImport } from './routes/login'
import { Route as FeedImport } from './routes/feed'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const TasksRoute = TasksImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const ModeratorRoute = ModeratorImport.update({
  id: '/moderator',
  path: '/moderator',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const FeedRoute = FeedImport.update({
  id: '/feed',
  path: '/feed',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/feed': {
      id: '/feed'
      path: '/feed'
      fullPath: '/feed'
      preLoaderRoute: typeof FeedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/moderator': {
      id: '/moderator'
      path: '/moderator'
      fullPath: '/moderator'
      preLoaderRoute: typeof ModeratorImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/tasks': {
      id: '/tasks'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/feed': typeof FeedRoute
  '/login': typeof LoginRoute
  '/moderator': typeof ModeratorRoute
  '/register': typeof RegisterRoute
  '/tasks': typeof TasksRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/feed': typeof FeedRoute
  '/login': typeof LoginRoute
  '/moderator': typeof ModeratorRoute
  '/register': typeof RegisterRoute
  '/tasks': typeof TasksRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/feed': typeof FeedRoute
  '/login': typeof LoginRoute
  '/moderator': typeof ModeratorRoute
  '/register': typeof RegisterRoute
  '/tasks': typeof TasksRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/feed'
    | '/login'
    | '/moderator'
    | '/register'
    | '/tasks'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/feed'
    | '/login'
    | '/moderator'
    | '/register'
    | '/tasks'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/feed'
    | '/login'
    | '/moderator'
    | '/register'
    | '/tasks'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  FeedRoute: typeof FeedRoute
  LoginRoute: typeof LoginRoute
  ModeratorRoute: typeof ModeratorRoute
  RegisterRoute: typeof RegisterRoute
  TasksRoute: typeof TasksRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  FeedRoute: FeedRoute,
  LoginRoute: LoginRoute,
  ModeratorRoute: ModeratorRoute,
  RegisterRoute: RegisterRoute,
  TasksRoute: TasksRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/feed",
        "/login",
        "/moderator",
        "/register",
        "/tasks"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/feed": {
      "filePath": "feed.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/moderator": {
      "filePath": "moderator.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/tasks": {
      "filePath": "tasks.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
